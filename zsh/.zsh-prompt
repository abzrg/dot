# window title
autoload -Uz add-zsh-hook
function xterm_title_precmd () {
    print -Pn -- '\e]2;%2~\a'
    [[ "$TERM" == 'screen'* ]] && print -Pn -- '\e_\005{g}%n\005{-}@\005{m}%m\005{-} \005{B}%~\005{-}\e\\'
}
function xterm_title_preexec () {
    print -Pn -- '\e]2;%2~ — ' && print -n -- "${(q)1}\a"
    [[ "$TERM" == 'screen'* ]] && { print -Pn -- '\e_\005{g}%n\005{-}@\005{m}%m\005{-} \005{B}%~\005{-} %# ' && print -n -- "${(q)1}\e\\"; }
}
if [[ "$TERM" == (Eterm*|alacritty*|aterm*|gnome*|konsole*|kterm*|putty*|rxvt*|screen*|tmux*|xterm*|st*) ]]; then
    add-zsh-hook -Uz precmd xterm_title_precmd
    add-zsh-hook -Uz preexec xterm_title_preexec
fi

# shlvl
__PROMPT_SUFFIX="%%"
function __shlvl_prompt()
{
    if [ -z $TMUX ]
    then
        local level=$(($SHLVL))
    else
        local level=$(($SHLVL - 1))
    fi
    local prompt_sign="$__PROMPT_SUFFIX"

    local suffix=""
    for i in {1.."${level}"}
    do
        suffix="$suffix$prompt_sign"
    done
    print "$suffix"
}

# abbreviated path
function __path_prompt() {
    if [ "$PWD" == "$HOME" ]; then 
        printf "~"
    else
        printf ${${:-${(j:/:)${(M)${(s:/:)${(D)PWD:h}}#(|.)[^.]}}/${PWD:t}}//~/\~}
    fi
}

# git
autoload -Uz vcs_info
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' stagedstr     '%B%F{green}+%f%b'
zstyle ':vcs_info:*' unstagedstr   '%B%F{red}%%%f%b'
zstyle ':vcs_info:*' formats       '[%c%u(%F{#D1B0D4}%b%f)%m] '
zstyle ':vcs_info:*' actionformats '%c%u%b %F{yellow}%m%f %B%s-%a%%b '
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-aheadbehind git-remotebranch

function +vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git --no-optional-locks status --porcelain | grep -q '^?? ' 2> /dev/null ; then
        hook_com[unstaged]+='%B%F{blue}?%f%b'
    fi
}

function +vi-git-aheadbehind() {
    local ahead behind
    local -a gitstatus
    git rev-parse ${hook_com[branch]}@{upstream} >/dev/null 2>&1 || return 0
    local -a ahead_and_behind=(
        $(git rev-list --left-right --count HEAD...${hook_com[branch]}@{upstream} 2>/dev/null)
    )
    ahead=${ahead_and_behind[1]}
    behind=${ahead_and_behind[2]}
    (( $ahead )) && gitstatus+=( "%B%F{blue}+${ahead}%f%b" )
    (( $behind )) && gitstatus+=( "%B%F{red}-${behind}%f%b" )
    hook_com[misc]+=${(j::)gitstatus}
}

function +vi-git-remotebranch() {
    local remote
    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
        --symbolic-full-name 2>/dev/null)/refs\/remotes\/}
    if [[ -n ${remote} && ${remote#*/} != ${hook_com[branch]} ]] ; then
        hook_com[branch]="${hook_com[branch]}%F{yellow}=%f%F{blue}${remote}%f"
    fi
}

# async
_zsh_prompt_async_vcs_info() {
  async_job vcs_info _zsh_prompt_async_vcs_info_job $PWD
}
_zsh_prompt_async_vcs_info_job() {
  cd -q $1
  vcs_info
  print $vcs_info_msg_0_
}
_zsh_prompt_async_vcs_info_start() {
  async_start_worker vcs_info
  async_register_callback vcs_info _zsh_prompt_async_vcs_info_done
}
_zsh_prompt_async_vcs_info_stop() {
  async_unregister_callback vcs_info
  async_stop_worker vcs_info
}
_zsh_prompt_async_vcs_info_done() {
  if [ $2 -eq 0 ]; then
    vcs_info_msg_0_=$3 # stdout
    zle reset-prompt
  else
    _zsh_prompt_async_vcs_info_stop
    _zsh_prompt_async_vcs_info_start
  fi
}
async_init
_zsh_prompt_async_vcs_info_start
add-zsh-hook precmd _zsh_prompt_async_vcs_info

# prompt
autoload -Uz add-zsh-hook
setopt PROMPT_SUBST
setopt TRANSIENT_RPROMPT

PROMPT=\
'${SSH_TTY:+%F{cyan\}%n@%m%f }'\
'${vcs_info_msg_0_}'\
'%F{cyan}%1~%f'\
$'\n'\
'$(__shlvl_prompt) '

RPROMPT="%(?..%F{#554444}(%?%))"
