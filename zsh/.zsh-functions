#!/bin/sh

# -- git wrapper

    # a git wrapper to implement the idea of getting back to the root of the project
    # src: Greg Hurrel's video on functions
    # (https://www.youtube.com/watch?v=C5aRtq-Rtbg)
    #
    #   git root            # changes to repo root
    #   git root COMMAND    # runs arbitrary command from repo root (eg. git root ls)
    function git() {
        if [ "$1" = "root" ]; then
            shift
            local ROOT="$(command git rev-parse --show-toplevel 2>/dev/null || echo -n .)"
            if [ $# -eq 0 ]; then
                cd "$ROOT"
            else
                # jump quickly, do sth and get back (happening in a subshell so I
                # stay wherever I was before)
                ( cd "$ROOT" && eval "$@" )
            fi
        else
            command git "$@"
        fi
    }


# -- efficient scratch space --

    # src: Greg Hurrel's video on functions
    # (https://www.youtube.com/watch?v=C5aRtq-Rtbg)
    function scratch() {
        local SCRATCH=$(mktemp -d)
        echo "Spawning subshell in scratch directory:"
        echo "  $SCRATCH"
        (cd $SCRATCH; zsh)
        echo "Removing scratch directory"
        rm -rf "$SCRATCH"
    }


# -- http server --

    # Usage: serve [--directory DIRECTORY] [PORT]
    #
    # Defaults to port 8000, current directory (ie. will use index.html if present).
    #
    # src: Greg Hurrel
    # (https://github.com/wincent/wincent/blob/master/aspects/dotfiles/files/.zsh/functions)
    function serve() {
        python3 -m http.server "$@"
    }


# -- subtree --

    # # Print a pruned version of a tree.
    # #
    # # Examples:
    # #
    # #   # Print all "*.js" files in src:
    # #   subtree '*.js' src
    # #
    # #   # Print all "*.js" files in the current directory:
    # #   subtree '*.js'
    # #
    # #   # Print all "*.js" and "*.ts" files in current directory:
    # #   subtree '*.js|*.ts'
    # #
    # # src: Greg Hurrel
    # # (https://github.com/wincent/wincent/blob/master/aspects/dotfiles/files/.zsh/functions)
    # function subtree() {
    #   tree -a --prune -P "$@"
    # }


# -- dictionary (sdcv) --

    # Data in ~/.local/share/stardict/dic/
    d() {
        [ $(tput cols) -lt 80 ] && local width=$(tput cols)
        sdcv -n --utf8-output --color "$@" 2>&1 \
            | sed 's/<br>/\n/g' \
            | sed 's/<BR>/\n/g' \
            | sed 's/|/\n/g' \
            | sed -e 's/<[^>]*>//g' \
            | fold -s -w ${width:-80} | \less -FRX
    }


# -- extract everything --

    # # src: derek taylor
    # ex() {
    #     # -- ARCHIVE EXTRACTION
    #     # usage: ex <file>
    #     if [ -f $1 ] ; then
    #         case $1 in
    #             *.tar.bz2)   tar xjf $1   ;;
    #             *.tar.gz)    tar xzf $1   ;;
    #             *.bz2)       bunzip2 $1   ;;
    #             *.rar)       unrar x $1   ;;
    #             *.gz)        gunzip $1    ;;
    #             *.tar)       tar xf $1    ;;
    #             *.tbz2)      tar xjf $1   ;;
    #             *.tgz)       tar xzf $1   ;;
    #             *.zip)       unzip $1     ;;
    #             *.Z)         uncompress $1;;
    #             *.7z)        7z x $1      ;;
    #             *.deb)       ar x $1      ;;
    #             *.tar.xz)    tar xf $1    ;;
    #             *.tar.zst)   unzstd $1    ;;
    #             *)           echo "'$1' cannot be extracted via ex()" ;;
    #         esac
    #     else
    #         echo "'$1' is not a valid file"
    #     fi
    # }


# -- cdjob --

    # # go to the directory of a background job
    # # src: https://unix.stackexchange.com/a/82217/419393
    # cdjob () {
    #     pid=$(jobs -p $1);
    #     d=$(readlink /proc/$pid/cwd);
    #     cd "$d"
    # }


# -- Create a directory and take me there --

    take() { mkdir -p $1 && cd $1 ;}


# -- fzf search for projects

    function proj() {
        cd "$(fd '[_a-zA-Z-]' $HOME/git/ --type directory --max-depth=2 | fzf)"
    }
    bindkey -s '\ep' 'proj\r'


# -- find pdf files

    function fpdf() {
        # no space should be in the path
        paths="$HOME/Documents $HOME/books $HOME/Documents/books"
        existing_paths=""
        for dir in $paths; do
            existing_paths="$existing_paths $dir"
        done
        pdf="$(find $existing_paths -type f -iname '*.pdf'  2>/dev/null | fzf-tmux --keep-right)"
        test -n "${pdf}" && open "${pdf}"
    }


# -- on/off socksproxy

    if [ `uname -s` = "Darwin" ]; then
        function proxy() {
            [ $# != 1 ] && printf "Usage: proxy <on or off>.\n" && return
            if [ $1 = "on" ]; then
                printf "Turning proxy on.\n"
                networksetup -setsocksfirewallproxystate Wi-Fi on
            elif [ $1 = "off" ]; then
                printf "Turning proxy off.\n"
                networksetup -setsocksfirewallproxystate Wi-Fi off
            else
                printf "Usage: proxy <on or off>.\n" && return
            fi
        }
    fi


# -- source/load virtual env

    function vact() {
        [ $# -eq 0 ] && local path_to_venv="$PWD"
        [ $# -eq 1 ] && local path_to_venv="$1"
        [ $# -gt 1 ] && printf "Wrong number of arguments\n"
        source "$path_to_venv"/venv/bin/activate
    }


# -- reset shell

    # fix the change of cursor via reset
    reset() { echo -ne '\e[2 q' && command reset ;}
