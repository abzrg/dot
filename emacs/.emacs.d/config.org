#+TITLE: My Emacs Configuration
#+AUTHOR: Ali Bozorgzadeh
#+EMAIL: alixbozorgzadeh@gmail.com
#+STARTUP: indent overview :results none
#+OPTIONS: toc:2 email:t

# Useful links
# - https://panadestein.github.io/emacsd/#orgc03b4c8

* Important programs to load first

#+begin_src elisp
  (add-to-list 'load-path "~/.emacs.d/scripts/")

  (require 'elpaca-setup)  ;; The Elpaca Package Manager
  (require 'buffer-move)   ;; Buffer-move for better window management
#+end_src

* Disable Backup and Auto-save

#+begin_src elisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+end_src

* Indentation

#+begin_src elisp
  (setq-default fill-column 90)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)

  ;; Disable electric indent mode
  (electric-indent-mode -1)
  (add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))

  ;; Disable emacs' builtin indentation in text and fundamental mode (locally)
  (add-hook 'text-mode-hook #'(lambda () (electric-indent-local-mode -1)))
  (add-hook 'org-mode-hook #'(lambda () (electric-indent-local-mode +1)))
  (add-hook 'fundamental-mode-hook #'(lambda () (electric-indent-local-mode -1)))
#+end_src

* History and Buffer state

#+begin_src elisp
  (savehist-mode +1)
  ;; (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq savehist-file "~/.emacs.d/.savehist")

  (require 'saveplace)
  (setq save-place-file "~/.emacs.d/.saveplace")
  (save-place-mode +1)

  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (setq-default recent-save-file "~/emacs.d/.recentf")

  ;; call `recentf-save-list` periodically, e.g. every 5 minutes
  (run-at-time nil (* 5 60) 'recentf-save-list)

  (global-auto-revert-mode 1)

#+end_src

* Fonts
#+begin_src elisp :results none
  (setq rc/font-family-mono "Iosevka NF")
  (setq rc/font-weight 'Regular)
  (setq rc/font-size-mono 200)

  (set-face-attribute 'default nil
    :font rc/font-family-mono
    :height rc/font-size-mono
    :weight rc/font-weight)
  ; (set-face-attribute 'variable-pitch nil
  ;   :font "Helvetica Neue"
  ;   :height 200
  ;   :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font rc/font-family-mono
    :height rc/font-size-mono
    :weight rc/font-weight)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  ;;(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  ;;(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  ;;
  ;; NOTE: The use of concat inside the quoted list is incorrect because concat needs to be
  ;; evaluated. However, it's inside a quoted list '(...), which prevents its evaluation.
  ;; NOTE: You need to use a backquote ` (also known as quasi-quotation) with a comma to
  ;; allow the expressions to be evaluated. Here's the corrected version:
  (add-to-list 'default-frame-alist `(font . ,(concat
   rc/font-family-mono "-" (number-to-string (/ rc/font-size-mono 10.0)))))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.0) ;; 0.12

  ;; (add-text-properties (point-min) (point-max)
  ;;                      '(line-spacing 0.01 line-height 1.0))

  ;; (defun set-bigger-spacing ()
  ;;   (setq-local default-text-properties '(line-spacing 0.01 line-height 1.0)))
  ;; (add-hook 'text-mode-hook 'set-bigger-spacing)
  ;; (add-hook 'prog-mode-hook 'set-bigger-spacing)
#+end_src

* Theme
#+begin_src elisp
  ;; (use-package ef-themes
  ;;   :ensure t
  ;;   :demand t
  ;;   :init
  ;;   (load-theme 'modus-vivendi t))

  ;; (use-package catppuccin-theme :ensure t :demand t)

  ;; (use-package gruvbox-theme
  ;; :config
  ;; (load-theme 'gruvbox t))

  (use-package gruber-darker-theme
    :config
    (load-theme 'gruber-darker t))

  ;; (use-package zenburn-theme
  ;;   :config
  ;;   (load-theme 'zenburn t))

  ;; Fontify the whole line for headings (with a background color).
  ;; (setq org-fontify-whole-heading-line t)

  ;; (setq leuven-scale-outline-headlines nil)
  ;; (setq leuven-dark-scale-outline-headlines nil)

  ;; (load-theme 'adwaita t)

  ;; (use-package vscode-dark-plus-theme
  ;;   :config
  ;;   (load-theme 'vscode-dark-plus t)
  ;;   ;; (add-to-list 'default-frame-alist '(foreground-color . "#...."))
  ;;   (add-to-list 'default-frame-alist '(background-color . "#181818")))
#+end_src

* UI
#+begin_src elisp
  ;; start the initial frame maximized
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  ;; start every frame maximized
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; (menu-bar-mode 0)
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  ;; (scroll-bar-mode -1)
  (blink-cursor-mode -1)

  ;; Don't pop-up UI dialog when prompting
  (setq use-dialog-box nil)

  ;; Disable alarms
  (setq ring-bell-function 'ignore)
  (setq visible-bell 1)

  ;; Show column number
  (column-number-mode +1)

  ;; Relative line numbers
  (setq-default display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; ;; Display truncated lines (fold long lines
  ;; (toggle-truncate-lines nil)

  ;; Scroll only current line when truncating lines
  ;; src: https://emacs.stackexchange.com/a/40909/30552
  ;; (setq truncate-lines t) ; local mode
  (setq-default truncate-lines t) ; local mode
  ;; (setq-local auto-hscroll-mode 'current-line) ; major mode must be activated before this
  (setq-default auto-hscroll-mode 'current-line)
#+end_src

* Pairing parens and quotes
* COMMENT electric pair mode
#+begin_src elisp :results none
  ;; No delay when deleting pairs
  (setq-default delete-pair-blink-delay 0)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
  (setq electric-pair-preserve-balance nil)
  (setq electric-pair-pairs
        '((8216 . 8217)
          (8220 . 8221)
          (171 . 187)))
  (setq electric-pair-skip-self 'electric-pair-default-skip-self)
  (setq electric-pair-skip-whitespace nil)
  (setq electric-pair-skip-whitespace-chars '(9 10 32))
  (setq electric-quote-context-sensitive t)
  (setq electric-quote-paragraph t)
  (setq electric-quote-string nil)
  (setq electric-quote-replace-double t)
  (electric-pair-mode 1)
#+end_src
** COMMENT Smart parens mode
#+begin_src elisp :results none
  (use-package smartparens
    :ensure smartparens  ;; install the package
    :diminish
    :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks
    :config

    ;; Stolen from: https://github.com/iqbalansari/dotEmacs/blob/config/parenthesis.org

    ;; Custom colors for parenthesis
    (set-face-attribute 'show-paren-mismatch nil :foreground "white" :background "red")

    ;; Show matching paranthesis immediately
    (show-paren-mode t)

    (setq show-paren-when-point-inside-paren t)

    ;; Highlight only the paranthesis
    (setq show-paren-style 'parenthesis)  ; does not work but the following does effect
    (setq sp-highlight-pair-overlay nil)

    ;; Keybindings for navigating around sexps using smartparens
    (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
    (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)
    (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
    (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

    ;; load default config
    (require 'smartparens-config)
    (show-smartparens-global-mode 1)
    (smartparens-global-mode 1))
#+end_src

* Undo / Redo (UndoFu + Undo-tree)
#+begin_src elisp
  ;; (use-package undo-fu
  ;;   :diminish
  ;;   :config
  ;;   (global-set-key (kbd "M-[") 'undo-fu-only-undo)
  ;;   (global-set-key (kbd "M-]") 'undo-fu-only-redo))

  (use-package undo-tree
    :diminish
    :bind (("C-x C-u" . undo-tree-visualize)
           ("C-x u" . undo-tree-undo)
           ("M-[" . undo)
           ("M-]" . undo-tree-redo))
    :config
    ;; Prevent undo tree files from polluting your git repo
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (global-undo-tree-mode))
#+end_src

* Org Mode
** Org settings

#+begin_src elisp :results none
  (use-package org
    :ensure nil
    :bind (("C-c a" . org-agenda))
    :config
    ;; (add-hook
    ;;  'org-mode-hook
    ;;  (lambda ()
    ;;    (setq-local
    ;;     electric-pair-inhibit-predicate
    ;;     `(lambda (c) (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

    ;; Record time and note when a task is completed
    (setq org-log-done 'note)

    ;; Record time and note when the scheduled date of a task is modified
    (setq org-log-reschedule 'note)

    ;; Record time and note when the deadline of a task is modified
    (setq org-log-redeadline 'note)

    ;; Record time and note when clocking out of a task
    (setq org-log-clock-out 'note)

    ;; Record time and note when a task is refiled
    (setq org-log-refile 'note)

    ;; Record note when clocking out
    (setq org-log-note-clock-out t)

    ;; Log everything into the LOGBOOK drawer
    (setq org-log-into-drawer t)

    ;; Log inserting a heading
    ;; (setq org-trest-insert-todo-heading-as-state-change t)

    ;; Default TODO keywords
    (setq org-todo-keywords '((sequence "TODO(t)" "LATER(l)" "|" "DONE(d)" "CANCELED(c)")))

    ;; Agenda
    (setq org-agenda-files '("~/todo.txt"))

    ;;--- Theme settings
    ;; source: https://zzamboni.org/post/beautifying-org-mode-in-emacs/

    ;; (add-hook 'org-mode-hook 'fixed-pitch-mode)
    ;; (add-hook 'org-mode-hook 'visual-line-mode)

    (setq org-hide-emphasis-markers nil)

    ;; Use "bullets" instead of "-" in lists
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "-")))))) ; •
    )
#+end_src

<s'TAB'= expands to src block
#+begin_src elisp
  (require 'org-tempo)
#+end_src
** Org packages
#+begin_src elisp
  (use-package toc-org
    :diminish
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

  (use-package org-indent
    :ensure nil
    :diminish
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (use-package org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
** Org capture
#+begin_src elisp
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-directory "~/org")
  (setq org-default-notes-file (concat org-directory "/notes.org"))

  (setq rc/org-gtd-file (concat org-directory "/gtd.org"))
  (setq rc/org-journal-file (concat org-directory "/jrnl.org"))

  (setq org-capture-templates
        `(("t" "Todo"
           entry (file+headline ,rc/org-gtd-file "Tasks")
           "* TODO %? %^G\n:LOGBOOK:\n%U\n%a\n:END:\n%i" :prepend t)
          ("j" "Journal"
           entry (file+datetree ,rc/org-journal-file)
           "* %<%H:%M> %? %^G\n:LOGBOOK:\n%U\n%a\n:END:\n%i"
           :prepend t :empty-lines 1)
          ("c" "Collection"
           entry (file+headline ,rc/org-gtd-file "Collect")
           "* %? %^G \n  %^t")
          ))
#+end_src
** COMMENT Latex

Custom report class that does not equate 1st level heading to =\part{}=

#+begin_src elisp
  ;; (add-to-list 'org-latex-classes
  ;;   '("myreport"
  ;;     "\\documentclass[11pt]{report}"
  ;;     ;; ("\\part{%s}" . "\\part*{%s}")
  ;;     ("\\chapter{%s}" . "\\chapter*{%s}")
  ;;     ("\\section{%s}" . "\\section*{%s}")
  ;;     ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src

Using =latexmk=

#+begin_src elisp
  (setq
   org-latex-pdf-process
   (list
    "latexmk -pdf -dvi- -f %f"))
#+end_src

#+begin_src elisp
  (require 'ox-latex)
  (setq org-latex-pdf-process '("latexmk -pdf %f"))  ;; Customize your LaTeX build process as needed

  ;; Set citation export processors for LaTeX
  (setq org-cite-export-processors '((latex biblatex) (t csl)))

  ;; Optional: Set a default citation style for biblatex
  (setq org-cite-biblatex-options
        '(("style" . "numeric")))  ;; Use a numbered citation style
#+end_src

* Diminish
#+begin_src elisp
  (use-package diminish)
#+end_src
* Yasnippet

#+begin_src elisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (setq yas/triggers-in-field nil)
    (setq yas-snippet-dirs '("~/.emacs.snippets/"))
    (yas-global-mode 1))
#+end_src

* CompAny
#+begin_src elisp
  (use-package company
    :ensure t
    :diminish
    :delight
    :bind (("C-c ." . company-complete)
           ("C-c C-." . company-complete)
           ("C-c s s" . company-yasnippet)
           :map company-active-map
           ("C-n" . company-select-next)
           ("C-p" . company-select-previous)
           ("C-d" . company-show-doc-buffer)
           ("M-." . company-show-location))
    :init
    (add-hook 'c-mode-common-hook 'company-mode)
    (add-hook 'sgml-mode-hook 'company-mode)
    (add-hook 'emacs-lisp-mode-hook 'company-mode)
    (add-hook 'text-mode-hook 'company-mode)
    (add-hook 'lisp-mode-hook 'company-mode)
    :config
    (eval-after-load 'c-mode
      '(define-key c-mode-map (kbd "[tab]") 'company-complete))

    (setq company-tooltip-limit 20)
    (setq company-show-numbers t)
    (setq company-dabbrev-downcase nil)
    (setq company-idle-delay 0.3)
    (setq company-echo-delay 0.3)
    ;; (setq company-ispell-dictionary (f-join tychoish-config-path "aspell-pws"))

    (setq company-backends '(company-capf
                             company-keywords
                             company-semantic
                             company-files
                             company-etags
                             company-dabbrev ; for completion in the buffer (similar to M-/ hippie expand)
                             company-clang
                             company-cmake
                             company-yasnippet))

    (add-to-list 'company-backends '(company-keywords :with company-dabbrev))
    (add-to-list 'company-backends '(company-keywords :with company-dabbrev-code))

    (global-company-mode))

  (use-package company-quickhelp
   :after company
   :config
   (setq company-quickhelp-idle-delay 0.3)
   (company-quickhelp-mode 1))
#+end_src
* Compile Mode
#+begin_src elisp
  ;; Stole from https://github.com/curtainp/.emacs.d/tree/lisp/init-basic.el
  (use-package compile
    :ensure nil
    :hook (compilation-filter . ansi-color-compilation-filter) ; Enable ANSI colors in compilation buffer
    :hook (shell-mode . compilation-shell-minor-mode)
    :bind (("C-;" . compile)
           ("C-c C-;" . recompile))
    :custom
    (compilation-scroll-output t) ; Keep scrolling the compilation buffer, `first-error' can be interesting
    (compilation-always-kill t) ; Always kill current compilation process before starting a new one
    ;; (compilation-skip-visited t) ; Skip visited messages on compilation motion commands
    (compilation-window-height 12) ; Keep it readable  :init
    :config
    ;; Integration of `compile' with `savehist'
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'compile-history)))
#+end_src
* Expand Region
#+begin_src elisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src
* IDO (Interactively-Do) and Imenu
** Ido
#+begin_src elisp
  ;; https://www.masteringemacs.org/article/introduction-to-ido-mode
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (setq ido-use-filename-at-point 'guess)
  (setq ido-use-url-at-point -1)
  (setq ido-create-new-buffer 'always)
  (setq-default confirm-nonexistent-file-or-buffer nil)
  (setq ido-file-extensions-order '(".c" ".cpp" ".C" ".H" ".py" ".txt" ".md" ".lua" ".yml" ".toml" ".cfg"))
  (setq ido-ignore-directories '("build" ".cache" ".git" "__pycache__" "venv" "node_modules"))
  (setq completion-ignored-extensions '(".bak" ".tags" ".o" ".so" ".aux" ".log" ".a" ".out"))
  (setq ido-ignore-extensions t)
  (ido-mode 1)
#+end_src
** Ido-at-point
#+begin_src elisp
  (use-package ido-at-point
    :init
    (ido-at-point-mode))
#+end_src
** Idomenu
#+begin_src elisp
  (use-package idomenu
    :ensure t
    :bind ("C-c i" . idomenu))
#+end_src
** Imenu merging default index function
#+begin_src elisp
  ;; src: https://stackoverflow.com/a/21656063/13041067
  (defun rc/merge-imenu ()
    (interactive)
    (let ((mode-imenu (imenu-default-create-index-function))
          (custom-imenu (imenu--generic-function imenu-generic-expression)))
      (append mode-imenu custom-imenu)))
#+end_src
* SMEX
#+begin_src elisp
  (use-package smex
   :bind (("M-x" . smex))
   :init
    (setq smex-save-file "~/.emacs.d/.smex_save")
    (smex-initialize))
#+end_src
* Project

# #+begin_src elisp
#   (require 'project)
# #+end_src

Projectile

#+begin_src elisp
  (use-package projectile
    :diminish projectile-mode
    :init
    ;; (setq projectile-known-projects-file "~/.emacs.d/local-files/projectile-bookmarks.eld")
    ;; (setq projectile-cache-file "~/.emacs.d/local-files/projectile.cache")
    :config
    (projectile-global-mode)
    (setq projectile-project-search-path '(("~/code/projects/" . 1) ("~/code/opt/" . 1)))
    (setq projectile-completion-system 'default)
    (define-key projectile-mode-map (kbd "C-x C-p") 'projectile-command-map)
    :bind (("C-x p" . projectile-command-map)))
#+end_src
* Whitespace

#+begin_src elisp
  (use-package whitespace
    :ensure nil
    :diminish
    :config
    (setq whitespace-display-mappings
          ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
          '(
            (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
            (newline-mark 10 [182 10]) ; 10 LINE FEED
            (tab-mark 9 [187 9] [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
            ))
    (setq whitespace-style '(face tabs trailing tab-mark trailing-mark))
    (setq show-trailing-whitespace t)

    ;; (defun whitespace-trailing-regexp (limit)
    ;;   "Match all trailing spaces. This overloads the definition in whitespace.el."
    ;;   (let ((status t))
    ;;     (while (unless (re-search-forward whitespace-trailing-regexp limit t)
    ;;              (setq status nil)))          ;; end of buffer
    ;;     status))

    ;; Don't enable whitespace for.
    (setq-default whitespace-global-modes
                  '(not shell-mode
                        help-mode
                        magit-mode
                        magit-diff-mode
                        ibuffer-mode
                        dired-mode
                        occur-mode))

    ;; Set whitespace-mode face to be always visible
    (add-hook 'prog-mode-hook 'whitespace-mode))
#+end_src

* Dired
#+begin_src elisp :results none
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :config
    ;; -agho
    ;; (setq dired-listing-switches "-agho --group-directories-first -F ")
    (setq dired-listing-switches "-alh")

    ;; Kill the current buffer when selecting a new directory.
    (setq dired-kill-when-opening-new-dired-buffer t)

    ;; Stole from tsoding
    (setq-default dired-dwim-target t)
    (setq dired-mouse-drag-files t))
#+end_src


** Tips
- When browsing in dired instead of hitting enter to see a directory use =i= then it adds
  that directory to the current buffer. ([[https://stackoverflow.com/posts/1839352/revisions][src]])

* Magit
Due to some complication in the installation of magit and transient the following is
needed

#+begin_src elisp :results none
  (setq package-install-upgrade-built-in t)

  (use-package transient
    :bind
    (:map transient-map
          ("<escape>" . transient-quit-all)))
#+end_src

Open the actual file when visiting symlink that points to a version-controlled file
#+begin_src elisp :results none
  (use-package vc
    :ensure nil
    :config
    (setq vc-follow-symlinks t))
#+end_src

MAGIT:
#+begin_src elisp :results none
  (use-package magit
    :ensure t
    :after transient
    :config
    (setq magit-save-repository-buffers nil) ; Disable Magit asking to save files
    (setq magit-uniquify-buffer-names nil)   ; Make magit buffers be wrapped w/ *
    (setq magit-auto-revert-mode nil)
    (global-set-key (kbd "C-c m s") 'magit-status)
    (global-set-key (kbd "C-c m l") 'magit-log)

    ;; Do not create a new window for magit buffers.
    (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
    (setq magit-bury-buffer-function 'magit-restore-window-configuration)

    ;; source: https://manueluberti.eu/posts/2018-02-17-magit-bury-buffer/
    (defun rc/magit-kill-buffers ()
      "Restore window configuration and kill all Magit buffers."
      (interactive)
      (let ((buffers (magit-mode-get-buffers)))
        (magit-restore-window-configuration)
        (mapc #'kill-buffer buffers)))
    (bind-key "q" #'rc/magit-kill-buffers magit-status-mode-map)

    ;; Custom functions for OPENING the REMOTE REPOSITORY

    (defun rc/parse-git-remote-url (url)
      "If necessary, convert an SSH to HTTPS git remote location."
      (if (string-match "^http" url)
          url
        (replace-regexp-in-string "\\(.*\\)@\\(.*\\):\\(.*\\)\\(\\.git?\\)"
                                  "https://\\2/\\3"
                                  url)))

    (defun rc/magit-open-remote-repo ()
      "Opens a remote repo URL. Prompts the user to choose a remote."
      (interactive)
      (let* ((remote-name (magit-read-remote "Choose remote repository"))
             (url (magit-get "remote" remote-name "url")))
        (browse-url (rc/parse-git-remote-url url))
        (message "Opening repo %s" url)))

    (defun rc/project-get-root-relative-path (&optional path)
      "Returns PATH relative to a project root."
      (let* ((path (expand-file-name (or path default-directory)))
             (root-path (expand-file-name
                         (cdr (project--find-in-directory path))))
             (root-length (length root-path))
             (rel-path (substring path root-length)))
        rel-path))

    (defun rc/magit-open-remote-dwim (&optional dir)
      "Opens a remote repo URL in the exact DIR location. Prompts the
  user to choose a remote."
      (interactive)
      (let* ((file (buffer-file-name))
             (dir (expand-file-name (or dir default-directory)))
             (remote-name (magit-read-remote "Choose remote repository" nil t))
             (url (rc/parse-git-remote-url
                   (magit-get "remote" remote-name "url")))
             ;; Identify remote hosting type (e.g., GitHub, GitLab, etc.)
             (remote-hosting-type
              (cond
               ((string-match-p (regexp-quote "github") url) "GitHub")
               ((string-match-p (regexp-quote "gitlab") url) "GitLab")
               (t (completing-read "Choose remote hosting type:"
                                   '("GitHub" "GitLab"))))))
        ;; Adapt to GitLab's URL standard
        (when (string= remote-hosting-type "GitLab")
          (setq url (concat url "/-")))
        ;; Adapt to differences in file and directory URL paths
        (if file
            (setq url (concat url "/blob/" (magit-get-current-branch)
                              "/" (rc/project-get-root-relative-path file)))
          (setq url (concat url "/tree/" (magit-getc-urrent-branch)
                            "/" (rc/project-get-root-relative-path dir))))
        ;; Perform actions
        (browse-url url)
        (message "Opening %s" url)))

    :commands
    (rc/magit-open-remote-repo
     rc/magit-open-remote-dwim))
#+end_src

Provide commit message guidelines/feedback when committing
#+begin_src elisp :results none
  ;; taken from https://protesilaos.com/dotemacs
  (use-package git-commit
    :after magit
    :custom
    (git-commit-fill-column 72)
    (git-commit-summary-max-length 50)
    (git-commit-known-pseudo-headers
     '("Signed-off-by"
       "Acked-by"
       "Modified-by"
       "Cc"
       "Suggested-by"
       "Reported-by"
       "Tested-by"
       "Reviewed-by"))
    (git-commit-style-convention-checks
     '(non-empty-second-line)))
#+end_src

Show word-granularity differences within diff hunks
#+begin_src elisp :results none
  (use-package magit-diff
    :ensure nil
    :after magit
    :config
    (setq magit-diff-refine-hunk t))
#+end_src

* Git Gutter

[[https://ianyepan.github.io/posts/emacs-git-gutter/][Source]]

#+begin_src elisp :results none
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :diminish
    :config
    (setq git-gutter:update-interval 0.02)
    (global-git-gutter-mode))

  (use-package git-gutter-fringe
    :diminish
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

* Multiple Cursors
#+begin_src elisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (global-set-key (kbd "C-\"") 'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-:") 'mc/skip-to-previous-like-this))
#+end_src

Move Text
# #+begin_src elisp
#   (use-package move-text
#     :config
#     (global-set-key (kbd "M-p") 'move-text-up)
#     (global-set-key (kbd "M-n") 'move-text-down))
# #+end_src

* Misc.
# Disable the annoying =C-x C-g=. let it be =C-g=
# #+begin_src elisp
#   (global-set-key (kbd "C-x C-g") 'keyboard-quit)
# #+end_src

Disable the two space after period madness. I was born in 90s
#+begin_src elisp
  (setq sentence-end-double-space nil)
#+end_src

Toggle truncate lines
#+begin_src elisp
  (global-set-key (kbd "C-x z") 'toggle-truncate-lines)
#+end_src

Diminish bunch of modes
#+begin_src elisp
  (use-package abbrev
    :ensure nil
    :diminish abbrev-mode)
#+end_src


#+begin_src elisp
  ;; Emacs don't overwrite this file
  (setq custom-file (locate-user-emacs-file "custom-var.el"))
  (load custom-file 'noerror 'nomessage)

  ;; ;; It makes C-n insert newlines if the point is at the end of the buffer. Useful, as it
  ;; ;; means you won’t have to reach for the return key to add newlines!
  ;; (setq next-line-add-newlines t)

#+end_src

Bring new frames to the front
#+begin_src elisp
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (select-frame-set-input-focus frame)))
#+end_src

Duplicate line (from mista zozin)
#+begin_src elisp
  (defun rc/duplicate-line ()
    "Duplicate current line"
    (interactive)
    (let ((column (- (point) (point-at-bol)))
          (line (let ((s (thing-at-point 'line t)))
                  (if s (string-remove-suffix "\n" s) ""))))
      (move-end-of-line 1)
      (newline)
      (insert line)
      (move-beginning-of-line 1)
      (forward-char column)))

  (global-set-key (kbd "C-,") 'rc/duplicate-line)
#+end_src

Find file at point
#+begin_src elisp
  (global-set-key (kbd "C-x C-g") 'find-file-at-point)
  (global-set-key (kbd "C-c i m") 'imenu) ;; ??
#+end_src

Switch to other buffer (problem in Macos)
#+begin_src elisp
  ;; Could also be done with 'C-x 5 o'
  ;; Stolen from https://stackoverflow.com/a/7364666/13041067
  (global-set-key "\M-`" 'other-frame)
#+end_src

Use =ibuffer= instead of the default buffer menu
#+begin_src elisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

From tsoding
#+begin_src elisp :results none
  (setq-default compilation-scroll-output t)

  (defun rc/kill-autoloads-buffers ()
    (interactive)
    (dolist (buffer (buffer-list))
      (let ((name (buffer-name buffer)))
        (when (string-match-p "-autoloads.el" name)
          (kill-buffer buffer)
          (message "Killed autoloads buffer %s" name)))))

  (defun rc/start-python-simple-http-server ()
    (interactive)
    (shell-command "python -m SimpleHTTPServer 3001 &"
                   "*Simple Python HTTP Server*"))

  (global-set-key (kbd "C-x p s") 'rc/start-python-simple-http-server)

  ;;; Stolen from http://ergoemacs.org/emacs/emacs_unfill-paragraph.html
  (defun rc/unfill-paragraph ()
    "Replace newline chars in current paragraph by single spaces.
  This command does the inverse of `fill-paragraph'."
    (interactive)
    (let ((fill-column 90002000)) ; 90002000 is just random. you can use `most-positive-fixnum'
      (fill-paragraph nil)))

  (global-set-key (kbd "C-c M-q") 'rc/unfill-paragraph)


  ;; remove trailing whitespace
  (defun rc/delete-trailing-whitespace ()
    (interactive)
    (delete-trailing-whitespace nil nil)
    (message "Deleted Trailing Whitespace"))

  (global-set-key (kbd "C-c \\") 'rc/delete-trailing-whitespace)

  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

* Spelling

Enabling spelling in bunch of major modes
#+begin_src elisp :results none
  ;; (add-hook 'org-mode-hook 'flyspell-mode)
  ;; (add-hook 'text-mode-hook 'flyspell-mode)
  ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

Silent abbreviation
#+begin_src elisp
  (use-package abbrev
    :defer 1
    :ensure nil
    :custom
    (abbrev-file-name (expand-file-name "scripts/abbrev_defs.el" user-emacs-directory))
    (abbrev-mode 1)
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file))
    :diminish)
#+end_src

* Language-Specific
** C/C++

#+begin_src elisp
  ;; (defun my-c-mode-common-hook ()
  ;;   ;; my customizations for all of c-mode, c++-mode, objc-mode, java-mode
  ;;   (c-set-offset 'substatement-open 0)
  ;;   ;; other customizations can go here

  ;;   (setq c++-tab-always-indent t)
  ;;   (setq c-basic-offset 4)                  ;; Default is 2
  ;;   (setq c-indent-level 4)                  ;; Default is 2

  ;;   (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
  ;;   (setq tab-width 4)
  ;;   (setq indent-tabs-mode t)  ; use spaces only if nil
  ;;   )

  ;; (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+end_src


#+begin_src elisp
  (require 'simpc-mode) ;; Enable a simple c mode
  (add-to-list 'auto-mode-alist '("\\.[hc]\\(pp\\)?\\'" . simpc-mode))
#+end_src

#+begin_src elisp
  ;; use c++ comments in c-mode
  (add-hook 'c-mode-hook (lambda () (c-toggle-comment-style -1)))

  ;; some c-mode settings
  (setq-default c-basic-offset 4)
  (setq c-default-style "bsd")
#+end_src

clang-format:

#+begin_src elisp
  (use-package clang-format
    :ensure t
    :config
    (add-hook
     'c++-mode-hook
     (lambda ()
       (local-set-key (kbd "C-c =") #'clang-format-region)))
    (add-hook
     'c-mode-hook
     (lambda ()
       (local-set-key (kbd "C-c =") #'clang-format-region))))
    (add-hook
     'simpc-mode-hook
     (lambda ()
       (local-set-key (kbd "C-c =") #'clang-format-region)))
#+end_src

** Make

#+begin_src elisp
  (add-to-list 'auto-mode-alist '("[Mm]akefile.*" . makefile-gmake-mode))
  (add-to-list 'auto-mode-alist '("\\.mak$" . makefile-gmake-mode))
  (add-to-list 'auto-mode-alist '("\\.make$" . makefile-gmake-mode))
#+end_src

** Python

Python environment variable management using +pyenv+ auto-virtualenv

#+begin_src elisp
  (use-package auto-virtualenv
    :config
    (setq auto-virtualenv-python-project-files
          '("requirements.txt" "Pipfile" "pyproject.toml" "setup.py" "setup.cfg" ".git" "manage.py" "tox.ini" ".flake8"))
    (setq auto-virtualenv-verbose t)
    (auto-virtualenv-setup)
    (add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
    (add-hook 'projectile-after-switch-project-hook  'auto-virtualenv-set-virtualenv))

    ;;   ;; Set correct Python interpreter
    ;;   (setq pyvenv-post-activate-hooks
    ;;         (list (lambda ()
    ;;                 (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
    ;;   (setq pyvenv-post-deactivate-hooks
    ;;         (list (lambda ()
    ;;                 (setq python-shell-interpreter "python3")))))
#+end_src

#+begin_src elisp :results none
  ;; ;; Python version
  ;; (setq python-shell-interpreter "~/opt/py/3.12/bin/ipython")
  ;; (setq python-shell-interpreter "~/opt/py/3.12/bin/ipython")
  ;; (setq python-shell-completion-native-enable nil)

  ;; Scroll with the output of the python shell (C-c C-r)
  (add-hook 'inferior-python-mode-hook
            (lambda ()
              (setq comint-move-point-for-output t)))
#+end_src

Formatting with ruff

#+begin_src elisp
  (use-package ruff-format
    :config
    (add-hook 'python-mode-hook 'ruff-format-on-save-mode))
#+end_src

** Fortran

#+begin_src elisp
  (use-package f90-mode
    :ensure nil
    :mode ("\\.f90\\'")
    :hook
    (f90-mode . (lambda () (setq flycheck-gfortran-args "-ffree-form"))))
#+end_src

** LaTeX

#+begin_src elisp
  (use-package auctex
    :ensure t
    :hook ((LaTeX-mode . LaTeX-preview-setup)
           (LaTeX-mode . LaTeX-math-mode)
           (LaTeX-mode . flyspell-mode)
           (LaTeX-mode . turn-on-reftex))
    :mode ("\\.tex\\'" . latex-mode)
    :config
    (setq TeX-auto-save t
          TeX-parse-self t
          TeX-save-query nil
          TeX-PDF-mode t
          TeX-source-correlate-mode t
          TeX-source-correlate-method 'auto
          TeX-source-correlate-start-server t))
#+end_src

** Emacs Ipython Notebooks

Ipython Notebook in Emacs
#+begin_src elisp
  (use-package ein
    :config
    (require 'ein)
    ;; (require 'ein-subpackages)
    (require 'ein-notebook))
#+end_src

** Markdown Mode

#+begin_src elisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
                ("C-c C-e" . markdown-do)))
#+end_src

** Gmsh

#+begin_src elisp
  (use-package gmsh-mode)
#+end_src

** Dockerfile

#+begin_src elisp
  (use-package dockerfile-mode)
#+end_src

** Editorconfig

#+begin_src elisp
  (use-package editorconfig
    :ensure t
    :diminish
    :config
    (editorconfig-mode 1))
#+end_src

** Git modes

#+begin_src elisp
  (use-package git-modes)
#+end_src

* COMMENT Connecting Emacs to the browser
** Atomic Chrome
Edit text in the browser using the ghost-text extension. Mostly for use with jupyter
notebook's web interface.

#+begin_src elisp :results none
  (use-package atomic-chrome
    :ensure t
    :init
    ;; Enable GhostText support
    (setq atomic-chrome-server-ghost-text t)
    (setq atomic-chrome-default-major-mode 'markdown-mode)
    (setq atomic-chrome-buffer-open-style 'split)  ; Opens buffer in new frame
    ;; Optionally set URL-specific modes
    (setq atomic-chrome-url-major-mode-alist
          '(("github\\.com" . gfm-mode)
            ("reddit\\.com" . text-mode)))

    (setq atomic-chrome-server-ghost-text-port 4002)

    :config
    (atomic-chrome-start-server))
#+end_src
